<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize players stats
hp = 5;
maxhp = hp;
expr = 0;
maxexpr = 3;
level = 1;
attack = 2;
class = CLASS_NORMAL;
classname = "Noname";
hpreg = 0;
manareg = 0;
fireballcd = 0;
flamethrowercd = 0;
maxflamethrowercd = 25;
def = 0;
defrating = 1;
atkpwr = 0;
ratkpwr = 0;
stamina = 10;
maxstamina = stamina;
hittimer = 0;
globalcd = 1;
hitpower = atkpwr + attack;

// get the players xstart and ystart position
if (instance_exists(obj_player)) {
    player_xstart = obj_player.x;
    player_ystart = obj_player.y;
} else {
    player_xstart = 0;
    player_ystart = 0;
}
draw_set_colour(c_white);
    


//save the previous room
previous_room = room;

room_start_action = NEW_ROOM;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm for the next weapon swing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stamina recharge alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the stats
var timer = 0;
if (hp &lt;= 0) {
hp = 0;
}
if (class = CLASS_KNIGHT) {
def = defrating*level;
}

// stamina recharge
if (class = CLASS_RANG and stamina &lt;= maxstamina &amp;&amp; alarm[0] == -1) {
    stamina += room_speed/300;
}

// fireball timer
if (class = CLASS_MAGE and fireballcd &lt; 2 &amp;&amp; alarm[0] == -1) {
    fireballcd += room_speed/3000;
}   
        
// flamethrower timer 
if (class = CLASS_MAGE and flamethrowercd &lt; maxflamethrowercd &amp;&amp; alarm[0] == -1) {
    flamethrowercd += room_speed/3000;
}
if (globalcd &lt;= 1 &amp;&amp; alarm[0] ==  -1) {
    globalcd += room_speed/450;
}    
  
// pause the game
if (obj_input.pause_key) {
    if (room != rm_pause) {
        if (instance_exists(obj_player)) {
            obj_player.persistent = false;
            }
            previous_room = room;
            room_persistent = true;
            room_goto(rm_pause);
    } else {
        
        room_goto(previous_room);
        }
        obj_input.pause_key = false;
        }
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remember the players start position
if (room == rm_pause) exit;

switch (room_start_action) {
    case RETURN:
        break;
    
    case NEW_ROOM:
    default:
        if (instance_exists(obj_player)) {
        player_xstart = obj_player.x;
        player_ystart = obj_player.y;
        }
        break;
    case LOAD:
        scr_load_game();
        break;
}


room_persistent = false;
room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the stats
var roundmaxexp = floor(maxexpr);
var roundglobal = floor(globalcd);
var roundhitpower = floor(hitpower);
var rounddefrating = floor(def);


if (class != CLASS_NORMAL) {
draw_text(32,16, "Class: " + string(classname));
draw_text(32,32, "Level: " + string(level));
draw_text(32,48, "Experience: " + string(expr) + "/" + string(roundmaxexp));
draw_text(32,64, "HP: " + string(hp) + "/" + string(maxhp));
draw_text(32,80, "---- Spell Control ----");
switch (class) {
    case CLASS_MAGE:
        var roundefire = floor(fireballcd);
        var roundflame = floor(flamethrowercd);
        draw_text(32,96, "Fireball charges: " + string(roundefire));
        if (obj_player.alarm[5] == -1) {
            draw_text(32,112, "Frostbolt ready!");
        }
        else {
            draw_text(32,112, "Frostbolt on cool down!");
        }
        break;
    case CLASS_KNIGHT:
        draw_text(32,96, "Attackpower: " + string(roundhitpower));
        draw_text(32,112, "Defense: " + string(rounddefrating));
        break;
    case CLASS_RANG:
        var roundedstam = floor(stamina);
        draw_text(32,96, "Stamina: " + string(roundedstam) + "/" + string(maxstamina));
        draw_text(32,112, "Ammo: ");
        break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
